// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenTimelapseSort.Contexts;

namespace OpenTimelapseSort.Migrations
{
    [DbContext(typeof(ImportContext))]
    [Migration("20210108191237_UpdateClassNames")]
    partial class UpdateClassNames
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("SDirectory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SImportid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("importId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("target")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("SImportid");

                    b.ToTable("ImageDirectory");
                });

            modelBuilder.Entity("SImage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SDirectoryid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("directoryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("fileSize")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fileTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("parentInstance")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("target")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("SDirectoryid");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("SImport", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("fetch")
                        .HasColumnType("INTEGER");

                    b.Property<string>("importDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("length")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("target")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Import");
                });

            modelBuilder.Entity("SDirectory", b =>
                {
                    b.HasOne("SImport", null)
                        .WithMany("directories")
                        .HasForeignKey("SImportid");
                });

            modelBuilder.Entity("SImage", b =>
                {
                    b.HasOne("SDirectory", null)
                        .WithMany("imageList")
                        .HasForeignKey("SDirectoryid");
                });

            modelBuilder.Entity("SDirectory", b =>
                {
                    b.Navigation("imageList");
                });

            modelBuilder.Entity("SImport", b =>
                {
                    b.Navigation("directories");
                });
#pragma warning restore 612, 618
        }
    }
}
